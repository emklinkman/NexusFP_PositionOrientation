# code for automatically updating Vicon .system files
# Written by EK Klinkman

# The goal of this code is to read in values from an .xlsx file generated by
# 'Force_Plate_Poisition_and_Orientation_Generic_v2.m', which reads current position and orientation
# values of a specified force plate in the lab global coordinate system...
# ...and to then read the Vicon .SYSTEM files for the current Nexus 2.x session and update/overwrite
# the location of the force plates via xml.etree.ElementTree 

## Hope this works :)
############################################################################################################################################
# Version History
# 2024.07.18 EK Klinkman v1 : re-structured code via GPT to read in .xlsx file
# 2024.08.13 EK Klinkman v2 : added position conversion from meters to millimeters 
# 2024.08.26 EK Klinkman v3 : added orientation conversion from degrees to radians (math.pi/180)
# 2024.08.29 EK Klinkman v4 : changed math.pi to (3.14159265359 / 180); added loop to convert deg to rad and print converted values
# 2024.08.30 EK Klinkman v5 : moved m to mm conversion to loop with deg to rad conversion
############################################################################################################################################

import openpyxl
import xml.etree.ElementTree as ET
from tkinter import Tk, filedialog

# Function to prompt the user to select a file for opening
def select_file(prompt):
    Tk().withdraw()
    file_path = filedialog.askopenfilename(title=prompt)
    return file_path

# Function to prompt the user to select a file for saving
def save_file(prompt):
    Tk().withdraw()
    file_path = filedialog.asksaveasfilename(defaultextension=".xml", title=prompt)
    return file_path

# Function to read values from the Excel file
def read_excel(file_path):
    wb = openpyxl.load_workbook(file_path)
    ws = wb.active

    # Dictionary to store the new values for each device
    new_values_dict = {
        'Device::Kistler:Force Plate:2.0.0.0:6091685': {
            'StandardPosition_X': ws['B2'].value,
            'StandardPosition_Y': ws['B3'].value,
            'StandardPosition_Z': ws['B4'].value,
            'StandardOrientation_X': ws['B6'].value,
            'StandardOrientation_Y': ws['B7'].value,
            'StandardOrientation_Z': ws['B8'].value,
        },
        'Device::Kistler:Force Plate:2.0.0.0:6091686': {
            'StandardPosition_X': ws['C2'].value,
            'StandardPosition_Y': ws['C3'].value,
            'StandardPosition_Z': ws['C4'].value,
            'StandardOrientation_X': ws['C6'].value,
            'StandardOrientation_Y': ws['C7'].value,
            'StandardOrientation_Z': ws['C8'].value,
        },
        'Device::Kistler:Force Plate:2.0.0.0:6108975': {
            'StandardPosition_X': ws['E2'].value,
            'StandardPosition_Y': ws['E3'].value,
            'StandardPosition_Z': ws['E4'].value,
            'StandardOrientation_X': ws['E6'].value,
            'StandardOrientation_Y': ws['E7'].value,
            'StandardOrientation_Z': ws['E8'].value,
        },
        'Device::Kistler:Force Plate:2.0.0.0:6108976': {
            'StandardPosition_X': ws['D2'].value,
            'StandardPosition_Y': ws['D3'].value,
            'StandardPosition_Z': ws['D4'].value,
            'StandardOrientation_X': ws['D6'].value,
            'StandardOrientation_Y': ws['D7'].value,
            'StandardOrientation_Z': ws['D8'].value,
        },
        'Device::Kistler:Force Plate:2.0.0.0:6240208': {
            'StandardPosition_X': ws['F2'].value,
            'StandardPosition_Y': ws['F3'].value,
            'StandardPosition_Z': ws['F4'].value,
            'StandardOrientation_X': ws['F6'].value,
            'StandardOrientation_Y': ws['F7'].value,
            'StandardOrientation_Z': ws['F8'].value,
        }
    }
    return new_values_dict

# Function to update the XML file
def update_xml():
    # Prompt the user to select the old XML file
    base_file_path = select_file('Select the old XML file')
    if not base_file_path:
        raise Exception('No file selected for reading.')

    # Prompt the user to select the Excel file
    excel_file_path = select_file('Select the Excel file with new values')
    if not excel_file_path:
        raise Exception('No Excel file selected for reading.')

    # Prompt the user to select the location and name for the new XML file
    output_file_path = save_file('Save the new XML file')
    if not output_file_path:
        raise Exception('No file selected for saving.')

    # Read the new values from the Excel file
    new_values_dict = read_excel(excel_file_path)

    # Read the old XML file
    tree = ET.parse(base_file_path)
    root = tree.getroot()

    # Iterate through the force plates in the new_values_dict
    for device_name, new_values in new_values_dict.items():
        # Find the correct ParamList by name
        for param_list in root.iter('ParamList'):
            if param_list.get('name') == device_name:
                # Iterate over the parameters and update their values
                for param in param_list.iter('Param'):
                    name = param.get('name')
                    if name in new_values:
                        value = new_values[name]
                        # Convert degrees to radians for orientation parameters
                        if "StandardOrientation" in name:
                            value = value * (3.14159265359 / 180)
                            print(f'{device_name} - {name}: {value} radians')
                        # Divide by 1000 for position parameters
                        elif "StandardPosition" in name:
                            value = value / 1000
                            print(f'{device_name} - {name}: {value} meters')
                        param.set('value', str(value))

    # Save the modified XML to the new file
    tree.write(output_file_path)

    print('XML file updated successfully.')

if __name__ == "__main__":
    update_xml()
